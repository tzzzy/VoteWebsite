package com.boc.votewebsite.mapper;

import com.boc.votewebsite.entity.VoteResult;
import org.apache.ibatis.annotations.*;

import java.util.List;

@Mapper
public interface ResultMapper {
    @Select("SELECT RESULT.STAFF_ID, STAFF.STAFF_NAME, STAFF.TYPE, STAFF.INSTITUTION, INSTITUTION.INSTITUTION_NAME, SUM(RESULT.EQUAL)/COUNT(RESULT.PROJECT_ID) AS EQUAL, SUM(RESULT.SUPSUB)/COUNT(RESULT.PROJECT_ID) AS SUPSUB, SUM(RESULT.AVERAGE)/COUNT(RESULT.PROJECT_ID) AS AVERAGE\n" +
            "FROM RESULT\n" +
            "INNER JOIN STAFF ON RESULT.STAFF_ID = STAFF.STAFF_ID\n" +
            "INNER JOIN INSTITUTION ON STAFF.INSTITUTION = INSTITUTION.INSTITUTION_ID\n" +
            "WHERE PROJECT_ID = #{projectId}\n" +
            "GROUP BY (RESULT.STAFF_ID, STAFF.STAFF_NAME, STAFF.TYPE, STAFF.INSTITUTION, INSTITUTION.INSTITUTION_NAME)")
    List<VoteResult> findResultById(Integer projectId);

    @Select("SELECT RESULT.STAFF_ID, STAFF.STAFF_NAME, STAFF.TYPE, STAFF.INSTITUTION, INSTITUTION.INSTITUTION_NAME, SUM(RESULT.EQUAL)/COUNT(RESULT.PROJECT_ID) AS EQUAL, SUM(RESULT.SUPSUB)/COUNT(RESULT.PROJECT_ID) AS SUPSUB, SUM(RESULT.AVERAGE)/COUNT(RESULT.PROJECT_ID) AS AVERAGE\n" +
            "FROM RESULT\n" +
            "INNER JOIN STAFF ON RESULT.STAFF_ID = STAFF.STAFF_ID\n" +
            "INNER JOIN INSTITUTION ON STAFF.INSTITUTION = INSTITUTION.INSTITUTION_ID\n" +
            "WHERE PROJECT_ID = #{projectId} and STAFF.TYPE = #{type}\n" +
            "GROUP BY (RESULT.STAFF_ID, STAFF.STAFF_NAME, STAFF.TYPE, STAFF.INSTITUTION, INSTITUTION.INSTITUTION_NAME)")
    List<VoteResult> findResultByIdAndType(Integer projectId, char type);

    @Select("SELECT RESULT.STAFF_ID, STAFF.STAFF_NAME, STAFF.TYPE, STAFF.INSTITUTION, INSTITUTION.INSTITUTION_NAME, SUM(RESULT.EQUAL)/COUNT(RESULT.PROJECT_ID) AS EQUAL, SUM(RESULT.SUPSUB)/COUNT(RESULT.PROJECT_ID) AS SUPSUB, SUM(RESULT.AVERAGE)/COUNT(RESULT.PROJECT_ID) AS AVERAGE\n" +
            "FROM RESULT\n" +
            "INNER JOIN PROJECT ON RESULT.PROJECT_ID = PROJECT.PROJECT_ID\n" +
            "INNER JOIN STAFF ON RESULT.STAFF_ID = STAFF.STAFF_ID\n" +
            "INNER JOIN INSTITUTION ON STAFF.INSTITUTION = INSTITUTION.INSTITUTION_ID\n" +
            "WHERE project.YEAR = #{year}\n" +
            "GROUP BY (RESULT.STAFF_ID, STAFF.STAFF_NAME, STAFF.TYPE, STAFF.INSTITUTION, INSTITUTION.INSTITUTION_NAME)")
    List<VoteResult> findResultByYear(Integer year);
    @Select("SELECT RESULT.STAFF_ID, STAFF.STAFF_NAME, STAFF.TYPE, STAFF.INSTITUTION, INSTITUTION.INSTITUTION_NAME, SUM(RESULT.EQUAL)/COUNT(RESULT.PROJECT_ID) AS EQUAL, SUM(RESULT.SUPSUB)/COUNT(RESULT.PROJECT_ID) AS SUPSUB, SUM(RESULT.AVERAGE)/COUNT(RESULT.PROJECT_ID) AS AVERAGE\n" +
            "FROM RESULT\n" +
            "INNER JOIN PROJECT ON RESULT.PROJECT_ID = PROJECT.PROJECT_ID\n" +
            "INNER JOIN STAFF ON RESULT.STAFF_ID = STAFF.STAFF_ID\n" +
            "INNER JOIN INSTITUTION ON STAFF.INSTITUTION = INSTITUTION.INSTITUTION_ID\n" +
            "WHERE project.YEAR = #{year} AND STAFF.TYPE = #{type}\n" +
            "GROUP BY (RESULT.STAFF_ID, STAFF.STAFF_NAME, STAFF.TYPE, STAFF.INSTITUTION, INSTITUTION.INSTITUTION_NAME)")
    List<VoteResult> findResultByYearAndType(Integer year, char type);

    @Insert("INSERT INTO RESULT VALUES (#{projectId}, #{staffId}, #{equal}, #{supsub}, #{average})")
    Integer addResult(Integer projectId, String staffId, double equal, double supsub, double average);


}
